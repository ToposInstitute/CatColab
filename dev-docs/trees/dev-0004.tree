\title{Structure editor components}

\subtree{
\title{Incremental parsing}

\p{Parsing is traditionally a backend task but if used in a structure editor, we
would want \em{live} and \em{incremental parsing} as the first step of content
entry. Parsing would then be part of the frontend.}

\p{Web-compatible incremental parsers:
\ol{
  \li{[Tree-sitter](http://tree-sitter.github.io/tree-sitter/)
  ([demo](http://tree-sitter.github.io/tree-sitter/playground)):
  Written in C, with both Node and WASM bindings}
  \li{[Lezer](https://lezer.codemirror.net/):
  Written in TypeScript by the CodeMirror team}
}
Tree-sitter is more mature and has bindings to many langauges.
Lezer is web native and is directly inspired by Tree-sitter.
Both are based on the same parsing algorithm.}
}

\p{Incremental parsing algorithms/design notes:
\ol{
  \li{[Monoidal Parsing](https://youtu.be/Txf7swrcLYs). Idea: your parser should be a monoid homomorphism from the free monoid on `Char` to "partial parses". You can then store your parses in a [sumtree](https://zed.dev/blog/zed-decoded-rope-sumtree), and then reparsing on a single edit should only be O(log(size of text)) rather than O(size of text).}
  \li{[Resilient LL Parsing Tutorial](https://matklad.github.io/2023/05/21/resilient-ll-parsing-tutorial.html)}
}
}

\subtree{
\title{Rich-text editors}

\p{Though structure editors are niche, components for web-based rich-text editors
are extensively developed:
\ol{
  \li{[ProseMirror](dev-0005): the standard}
  \li{[Lexical](https://lexical.dev/)
  ([HN](https://news.ycombinator.com/item?id=31019778)), by Facebook}
  \li{[Quill](https://quilljs.com/): older, but a new 2.0 release is on the way}
}}

\p{All of the rich-text editors support [collaborative editing](dev-0006) via
[Yjs](https://yjs.dev/).

I hypothesized that ProseMirror was flexible enough to \em{be} the foundation
for a structure editor, but experiments suggest that its editing model is too
text-centric for that role.}
}

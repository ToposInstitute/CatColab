\title{Collaborative editing}

\p{The industry standard for real-time collaborative editing on the web is
\strong{[Yjs](https://yjs.dev/)}, an implementation of
[CRDT](https://en.wikipedia.org/wiki/Conflict-free_replicated_data_type) for
JSON-compatible data structures. Yjs is used in many rich text or structure
editors for the web, including JupyterLab.}

\subtree{
\title{Application architecture}

\p{Yjs is very much a JavaScript library: a \code{YDocument} is schema-less and
its contents are typed only in the loosest sense. Thus, in a well-architected
structure editor, the Yjs data structures should be supplemented with a document
object that is schema-full and typed.}

\p{JupyterLab, which added Yjs integration in recent versions, is a good example:
\ul{
\li{Early [blog post](https://blog.jupyter.org/how-we-made-jupyter-notebooks-collaborative-with-yjs-b8dff6a9d8af)
and [discussion](https://discuss.yjs.dev/t/separating-the-application-model-from-the-shared-data-structure/1067)}
\li{Documentation: [JupyterLab](https://jupyterlab.readthedocs.io/en/4.1.x/extension/documents.html)
and [Jupyter YDoc](https://jupyter-ydoc.readthedocs.io/)}
\li{Code: the heart is [\code{YNotebook}](https://github.com/jupyter-server/jupyter_ydoc/blob/main/javascript/src/ynotebook.ts)}
}}

\p{We ended up deciding instead to go with [Automerge](https://automerge.org/). There are two main reasons for this
\ol{
  \li{The interface to Automerge is via immutable, typed snapshots. This makes reasoning about a deeply nested Automerge document much easier than reasoning about a deeply nested Y.js document.}
  \li{We have several connections to Martin Kleppmann, and may want to collaborate with him in the future. At a personal level, it seems like he has thought deeply about some of the design issues in this space, which resulted in a recent complete refactor of automerge. Thus, it makes sense to long-term invest in automerge, as it might result in a productive collaboration, and it is more likely that desired features from CatColab could end up influencing the long term direction of Automerge.}
}
}
}

\subtree{
\title{Persistence layer}

\p{There are several out-of-the-box options for persisting a Yjs document.}

\ol{
  \li{[y-websocket](https://github.com/yjs/y-websocket) seems like the "standard" yjs backend, and it supports persistence via [y-leveldb](https://github.com/yjs/y-leveldb), which uses [LevelDB](https://github.com/google/leveldb). Alarmingly, the leveldb repository has the following message at the top of the readme:
    \blockquote{
      This repository is receiving very limited maintenance. We will only review the following types of changes.

      \ul{
        \li{Fixes for critical bugs, such as data loss or memory corruption}

        \li{Changes absolutely needed by internally supported leveldb clients. These typically fix breakage introduced by a language/standard library/OS update}
      }
    }
    However, it appears that there are several clones, for instance the facebook version: [rocksdb](https://github.com/facebook/rocksdb/).
  }
  \li{[y-sweet](https://github.com/drifting-in-space/y-sweet) is written in Rust, and just persists directly to the filesystem (or to S3). Seems fairly simple, and gets points for not needing any external database. The authors also have another project [Plane](https://github.com/drifting-in-space/plane), which seems like it might be useful for us elsewhere; also see [this post about avoiding CRDTs via centralization](https://driftingin.space/posts/you-might-not-need-a-crdt). Their product based on Plane, [Jamsocket](https://jamsocket.com/) also seems interesting. Seems something like a "generalized binder", not just for running jupyter notebooks, and a lot simpler. I think that these are mostly irrelevant to y-sweet, though interesting for thinking about later down the line.}
  \li{[hocuspocus](https://tiptap.dev/docs/hocuspocus/server/extensions#database) seems to have built-in persistence support for a variety of databases, including notably sqlite.}
}

\p{Recommendation: y-websocket with y-leveldb for the relation macro demo, perhaps y-sweet later on.}
}

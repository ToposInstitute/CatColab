name: ci

on:
  push:
    branches:
      - main
  pull_request:

env:
  CARGO_TERM_COLOR: always

jobs:
  rust_tests:
    name: rust tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        toolchain:
          - stable
          - beta
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Tests
        run: |
          rustup toolchain install ${{ matrix.toolchain }}
          rustup default ${{ matrix.toolchain }}

          cargo build --all-features --verbose
          cargo test --all-features --verbose

  rust_formatting:
    name: rust formatting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain from file
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Check formatting
        run: |
          cargo fmt --check

  rust_lints:
    name: rust lints
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain from file
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Check clippy warnings
        run: |
          cargo clippy -- -D warnings

  rust_docs:
    name: rust docs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain from file
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Check rustdoc warnings
        run: |
          RUSTDOCFLAGS='--deny warnings' cargo doc --no-deps

  npm_checks:
    name: npm checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install NodeJS dependencies
        run: |
          pnpm install

      - name: Format/linting/import sorting
        run: |
          pnpm --filter "./packages/*" run ci

  run_nix_tests:
    name: "nixos integration tests"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    # Setup Nix and Nix cache, copied in deploy.yml
    - uses: nixbuild/nix-quick-install-action@v31
    - name: Restore and save Nix store
      uses: nix-community/cache-nix-action@v6
      with:
        # The github action cache is limited to 10GB and the compressed nix store for this project is
        # typically between 3GB and 5GB, as a result it is very easy to thrash the cache by when using
        # using hashed cache keys. This results in "useful" caches being evicted.
        # 
        # Speculation: if a cache that was cleaned up by github is referenced again (by primary-key)
        # github does not save that cache again at the end of the job (or automatically collects it?).
        # This can result in the most "useful" cache being discarded.
        # 
        # To work around this, we always reuse the same cache and rely on nix garbage collection for
        # keeping that cache a reasonable size.
        #
        # There is a degenerate case: where parallel development uses different flake inputs (like the
        # NixOS versions). Each job's garbage collection will prune store paths not tied to that job's
        # inputs. As a result, branches with differing inputs may end up with almost no cached data.
        # This case should not come up that often, and when/if it does it will just result in some ~15min
        # CI times.
        primary-key: "fixed-primary-ke2"
        purge: true
        purge-primary-key: "always"

    - run: nix build .#test-cache
    # - run: nix flake check --no-sandbox

    - name: Prune unused Nix store paths
      run: nix-collect-garbage -d      

  # deploy_backend:
  #   name: Deploy backend to AWS
  #   runs-on: ubuntu-latest

  #   env:
  #     TARGET_HOST: backend-next.catcolab.org
  #     HOST_CONFIG: catcolab-next
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     # Setup Nix and Nix cache, copied in ci.yml
  #     - uses: nixbuild/nix-quick-install-action@v31
  #     - name: Restore and save Nix store
  #       uses: nix-community/cache-nix-action@v6
  #       with:
  #         primary-key: "fixed-primary-key2"
  #         # restore and save a cache using this key
  #         # primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
  #         # if there's no cache hit, restore a cache by this prefix
  #         # restore-prefixes-first-match: nix-${{ runner.os }}-

  #     - name: Set up SSH key
  #       run: |
  #         mkdir -p ~/.ssh
  #         echo "${{ secrets.CATCOLAB_NEXT_DEPLOYUSER_KEY }}" > ~/.ssh/id_ed25519
  #         chmod 600 ~/.ssh/id_ed25519
  #         ssh-keyscan ${TARGET_HOST} >> ~/.ssh/known_hosts

  #     - name: Run nixos-rebuild switch remotely
  #       run: |
  #           nix build .#test-cache
  #          # nix run github:serokell/deploy-rs .#${HOST_CONFIG}

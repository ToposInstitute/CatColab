name: ci

on:
  push:
    branches:
      - main
  pull_request:

env:
  CARGO_TERM_COLOR: always

jobs:
  rust_tests:
    name: rust tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        toolchain:
          - stable
          - beta
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Tests
        run: |
          rustup toolchain install ${{ matrix.toolchain }}
          rustup default ${{ matrix.toolchain }}

          cargo build --all-features --verbose
          cargo test --all-features --verbose

  rust_formatting:
    name: rust formatting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain from file
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Check formatting
        run: |
          cargo fmt --check

  rust_lints:
    name: rust lints
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain from file
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Check clippy warnings
        run: |
          cargo clippy -- -D warnings

  rust_docs:
    name: rust docs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain from file
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Check rustdoc warnings
        run: |
          RUSTDOCFLAGS='--deny warnings' cargo doc --no-deps

  npm_checks:
    name: npm checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install NodeJS dependencies
        run: |
          pnpm install

      - name: Format/linting/import sorting
        run: |
          pnpm --filter "./packages/*" run ci

  run_nix_tests:
    name: "nixos integration tests"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - uses: nixbuild/nix-quick-install-action@v31
    - name: Restore and save Nix store
      uses: nix-community/cache-nix-action@v6
      with:
        # The github action cache is limited to 10GB and the compressed nix store for this project is
        # typically between 3GB and 5GB, as a result it is very easy to thrash the cache by when using
        # using hashed cache keys. This results in "useful" caches being evicted.
        # 
        # NOTE: The above does not fully explain some issues we've had with cache misses. We've had
        # back-to-back runs with the exact same key fail to find a cache, when the same key matched a
        # cache days before.
        #
        # To work around this, we always reuse the same cache and rely on nix garbage collection for
        # keeping that cache a reasonable size.
        #
        # There is a degenerate case: where parallel development uses different flake inputs (like the
        # NixOS versions). Each job's garbage collection will prune store paths not tied to that job's
        # inputs. As a result, branches with differing inputs may end up with almost no cached data.
        # This case should not come up that often, and when it does it will just result in some ~15min
        # CI times.
        primary-key: "fixed-primary-key13"

        # Since we are manually updating the cache, and we don't know if the cache has changed we need to
        # purge the existing cache and re-upload it on every run. We could save 90s in CI it we
        # figured out how to skip the purge + re-upload when no garbage is collected.
        purge: true
        purge-primary-key: "always"

    - name: Run NixOS integration tests
      run: |
        nix build .#nixosConfigurations.catcolab-vm.config.system.build.vm
        nix build .#nixosConfigurations.catcolab.config.system.build.toplevel

    - name: Prune unused Nix store paths
      run: nix store gc --option keep-outputs true --option keep-derivations true


  deploy_backend:
    name: Deploy backend to AWS
    runs-on: ubuntu-latest
    env:
      TARGET_HOST: backend-next.catcolab.org
      HOST_CONFIG: catcolab-next
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: nixbuild/nix-quick-install-action@v31
      - name: Restore and save Nix store
        uses: nix-community/cache-nix-action@v6
        with:
          # see ci.yml
          primary-key: "fixed-primary-key13"
          purge: true
          purge-primary-key: "always"

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.CATCOLAB_NEXT_DEPLOYUSER_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan ${TARGET_HOST} >> ~/.ssh/known_hosts

      - name: Run nixos-rebuild switch remotely
        run: |
           nix run github:serokell/deploy-rs .#${HOST_CONFIG}

  

name: ci

on:
  push:
    branches:
      - main
  pull_request:

env:
  CARGO_TERM_COLOR: always

jobs:
  rust_tests:
    name: rust tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        toolchain:
          - stable
          - beta
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Tests
        run: |
          rustup toolchain install ${{ matrix.toolchain }}
          rustup default ${{ matrix.toolchain }}

          cargo build --all-features --verbose
          cargo test --all-features --verbose

  rust_formatting:
    name: rust formatting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain from file
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Check formatting
        run: |
          cargo fmt --check

  rust_lints:
    name: rust lints
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain from file
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Check clippy warnings
        run: |
          cargo clippy -- -D warnings

  rust_docs:
    name: rust docs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain from file
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Check rustdoc warnings
        run: |
          RUSTDOCFLAGS='--deny warnings' cargo doc --no-deps

  npm_checks:
    name: npm checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install NodeJS dependencies
        run: |
          pnpm install

      - name: Format/linting/import sorting
        run: |
          pnpm --filter "./packages/*" run ci

  run_nix_tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: nixbuild/nix-quick-install-action@v31
      # nix_conf: |
      #   keep-env-derivations = true
      #   keep-outputs = true
    - name: Restore and save Nix store
      uses: nix-community/cache-nix-action@v6
      with:
        # restore and save a cache using this key
        primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
        # if there's no cache hit, restore a cache by this prefix
        restore-prefixes-first-match: nix-${{ runner.os }}-
        # collect garbage until the Nix store size (in bytes) is at most this number
        # before trying to save a new cache
        # 1G = 1073741824
        # gc-max-store-size-linux: 1G
        # do purge caches
        # purge: true
        # purge all versions of the cache
        # purge-prefixes: nix-${{ runner.os }}-
        # created more than this number of seconds ago
        # purge-created: 0
        # or, last accessed more than this number of seconds ago
        # relative to the start of the `Post Restore and save Nix store` phase
        # purge-last-accessed: 0
        # except any version with the key that is the same as the `primary-key`
        # purge-primary-key: never
    # - run: nix build .#nixosConfigurations.my-vm.config.system.build.vm
    - run: nix flake check --no-sandbox

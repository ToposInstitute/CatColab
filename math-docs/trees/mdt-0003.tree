\date{2025-07-14}
\title{Algebras over generalized list monads}
\author{Kevin Carlson}
\import{macros}
\taxon{example}
\def\S{\dbl{S}}

\p{
    We consider #{\ell}-algebras over various generalized list monads #{\S:\Span\to \Span}. Note that any such 
    algebra structure #{\alpha: \S X\to X} endows a category #{X_1\rightrightarrows X_0} with a monoid structure on objects. 
    On morphisms, #{\alpha} maps any map #{x:(m\leftarrow r\to n)\to X} in #{\S(X)} to 
    a "tensor product" #{\alpha(x)\in X_1}, such that given the monad multiplication situation
    % https://q.uiver.app/#q=WzAsMTIsWzAsMCwibSJdLFsxLDAsInIiXSxbMiwwLCJuIl0sWzAsMSwiXFxzdW1fe20nfUFee20nfSJdLFsyLDEsIlxcc3VtX3tuJ31CXntuJ30iXSxbMSwxLCJcXHN1bV97bSdcXGxlZnRhcnJvdyByJ1xcdG8gbid9XFxTcGFuKHInLFgpIl0sWzAsMiwiXFxzdW1faVxcYmFyIGEoaSkiXSxbMCwzLCJBIl0sWzEsMiwiXFxzdW1fa1xcYmFyIHgoaykiXSxbMSwzLCJYIl0sWzIsMywiQiJdLFsyLDIsIlxcc3VtX2pcXGJhciBiKGopIl0sWzEsMF0sWzEsMl0sWzUsM10sWzUsNF0sWzAsMywiXFxiYXIgYSJdLFsxLDUsIlxcYmFyIHgiLDFdLFsyLDQsIlxcYmFyIGIiLDJdLFs2LDcsImEiLDJdLFs5LDddLFs4LDksIngiLDFdLFs4LDZdLFs5LDEwXSxbMTEsMTAsImIiXSxbOCwxMV0sWzUsOCwiIiwwLHsic2hvcnRlbiI6eyJzb3VyY2UiOjIwLCJ0YXJnZXQiOjIwfSwic3R5bGUiOnsidGFpbCI6eyJuYW1lIjoibWFwcyB0byJ9fX1dXQ==
    \quiver{\begin{tikzcd}
        m & r & n \\
        {\sum_{m'}A^{m'}} & {\sum_{m'\leftarrow r'\to n'}\Span(r',X)} & {\sum_{n'}B^{n'}} \\
        {\sum_i\bar a(i)} & {\sum_k\bar x(k)} & {\sum_j\bar b(j)} \\
        A & X & B
        \arrow["{\bar a}", from=1-1, to=2-1]
        \arrow[from=1-2, to=1-1]
        \arrow[from=1-2, to=1-3]
        \arrow["{\bar x}"{description}, from=1-2, to=2-2]
        \arrow["{\bar b}"', from=1-3, to=2-3]
        \arrow[from=2-2, to=2-1]
        \arrow[from=2-2, to=2-3]
        \arrow[maps to, from=2-2, to=3-2]
        \arrow["a"', from=3-1, to=4-1]
        \arrow[from=3-2, to=3-1]
        \arrow[from=3-2, to=3-3]
        \arrow["x"{description}, from=3-2, to=4-2]
        \arrow["b", from=3-3, to=4-3]
        \arrow[from=4-2, to=4-1]
        \arrow[from=4-2, to=4-3]
    \end{tikzcd}}
        we have the unit axiom, which always says the same thing it says for algebras of \List,
        and more interestingly the multiplication axiom #{\alpha(\mu(\bar x))=\alpha(x)=\alpha(\lambda(k).\alpha(\bar x(k)))}. Let us 
        turn to examples.
}
\ul{
    \li{
    \p{When #{\S=(\id,\mathrm{bij})}, we have for any two objects #{x,y\in X_0} a distinguished
    morphism #{\tau_{x,y}:x\otimes y\to y\otimes x} arising from #{\alpha} applied to the diagram below,
    where #{\tau:2\to 2} is the nontrivial automorphism.
        % https://q.uiver.app/#q=WzAsNixbMCwwLCIyIl0sWzEsMCwiMiJdLFsyLDAsIjIiXSxbMCwxLCJYXzAiXSxbMiwxLCJYXzAiXSxbMSwxLCJYXzEiXSxbMSwwLCIiLDAseyJsZXZlbCI6Miwic3R5bGUiOnsiaGVhZCI6eyJuYW1lIjoibm9uZSJ9fX1dLFsxLDIsIlxcdGF1Il0sWzUsM10sWzUsNF0sWzAsMywiKHgseSkiLDJdLFsxLDUsIihcXGlkX3gsXFxpZF95KSIsMV0sWzIsNCwiKHkseCkiXV0=
        \quiver{\begin{tikzcd}
            2 & 2 & 2 \\
            {X_0} & {X_1} & {X_0}
            \arrow["{(x,y)}"', from=1-1, to=2-1]
            \arrow[equals, from=1-2, to=1-1]
            \arrow["\tau", from=1-2, to=1-3]
            \arrow["{(\id_x,\id_y)}"{description}, from=1-2, to=2-2]
            \arrow["{(y,x)}", from=1-3, to=2-3]
            \arrow[from=2-2, to=2-1]
            \arrow[from=2-2, to=2-3]
        \end{tikzcd}}
    Since #{\alpha:TX\to X} is a functor and the span #{2=2\xto{\tau} 2} is an involution, 
    we see that #{\tau_{x,y}\tau_{y,x}=\id_{x\otimes y}}, which together with the 
    monoid structure on #{\List X_1} given by restricting along the map #{\List\to \S} 
    begins to suggest that #{\alpha} is a (strict) symmetric monoidal category structure on #{X}.
    Indeed we extract such a structure using external functoriality: by considering 
    first applying #{\alpha} to the diagram below and then composing, versus first composing 
    and then applying #{\alpha}, we find that #{(f\otimes g)\cdot \tau_{x',y'}=f\otimes_\tau g}, 
    where 
    ##{f\otimes_\tau g:x\otimes y\to y'\otimes x'=\alpha((2=2\xto{\tau} 2)\xto{(x,y),(f,g),(x',y')} X_0\leftarrow X_1\to X_0).}

    is an atomic "twisted tensor" not present in the usual biased formulation of SMC's. 
    By symmetry, we also have #{\tau_{x,y}\cdot g\otimes f=f\otimes_\tau g}, which provides the 
    naturality condition #{\tau_{x,y}\cdot g\otimes f=f\otimes g\cdot \tau_{x',y'}} of the braiding. In 
    fact there are exactly analogous natural "multi-braidings" #{B_\sigma} corresponding to any permutation 
    #{\sigma} of #{n},
    and even more, we have twisted tensors #{\otimes_\sigma:X^n\to X} such that
    #{\otimes_\sigma (f)\cdot \otimes_{\sigma'}(f') = \otimes_{\sigma\cdot \sigma'}(f)\cdot_\sigma (f')},
    where #{\cdot_\sigma} indicates composition in #{\S X} along a #{\sigma}-twisted span.
    }
    \p{
    All the above
    follows from functoriality of #{\alpha}, without yet touching its interaction with the 
    monad multiplication #{\mu}, which is why we so far have only described the properties of 
    braidings at a single fixed #{n} at a time. Of course, braiding by a permutation like 
    #{(2\ 1)(3): 3\to 3} ought to be the same as braiding by #{(2\ 1)} and tensoring with an identity, 
    which is precisely what that last axiom gives us. For this particular case, consider 
    the following situation, where 
    #{s} is the span #{(2=2\xto{\tau} 2)\xto{(x,y),(\id_x,\id_y),(y,x)} X_0\leftarrow X_1\to X_0}
    such that #{\alpha_s=\tau_{x,y}}:
    % https://q.uiver.app/#q=WzAsNyxbMSwwLCIyIl0sWzAsMCwiMiJdLFsyLDAsIjIiXSxbMSwxLCJcXFMgWF8xIl0sWzAsMSwiXFxMaXN0IFhfMCJdLFsyLDEsIlxcTGlzdCBYXzAiXSxbMCwyXSxbMCwxLCIiLDAseyJsZXZlbCI6Miwic3R5bGUiOnsiaGVhZCI6eyJuYW1lIjoibm9uZSJ9fX1dLFswLDIsIiIsMix7ImxldmVsIjoyLCJzdHlsZSI6eyJoZWFkIjp7Im5hbWUiOiJub25lIn19fV0sWzEsNCwiKHgseSkseiIsMl0sWzIsNSwiKHkseCkseiJdLFszLDRdLFszLDVdLFswLDMsIihzLFxcZXRhKFxcaWRfeikpIiwxXV0=
    \quiver{\begin{tikzcd}
        2 & 2 & 2 \\
        {\List X_0} & {\S X_1} & {\List X_0} \\
        {}
        \arrow["{(x,y),z}"', from=1-1, to=2-1]
        \arrow[equals, from=1-2, to=1-1]
        \arrow[equals, from=1-2, to=1-3]
        \arrow["{(s,\eta(\id_z))}"{description}, from=1-2, to=2-2]
        \arrow["{(y,x),z}", from=1-3, to=2-3]
        \arrow[from=2-2, to=2-1]
        \arrow[from=2-2, to=2-3]
    \end{tikzcd}}
    }
    If we compose the above cell with #{\alpha}, we get the element #{(\tau_{x,y},\id_z)} of 
    #{\S X}, which #{\alpha} sends to #{\tau_{x,y}\otimes \id_z}. If instead we apply #{\mu}, 
    we get the element
    % https://q.uiver.app/#q=WzAsNixbMSwwLCIzIl0sWzAsMCwiMyJdLFsyLDAsIjIiXSxbMSwxLCIgWF8xIl0sWzAsMSwiWF8wIl0sWzIsMSwiWF8wIl0sWzAsMSwiIiwwLHsibGV2ZWwiOjIsInN0eWxlIjp7ImhlYWQiOnsibmFtZSI6Im5vbmUifX19XSxbMCwyLCIoMlxcIDEpIl0sWzEsNCwieCx5LHoiLDJdLFsyLDUsInkseCx6Il0sWzMsNF0sWzMsNV0sWzAsMywiKFxcaWRfeCxcXGlkX3ksXFxpZF96KSIsMV1d
    \quiver{\begin{tikzcd}
        3 & 3 & 2 \\
        {X_0} & { X_1} & {X_0}
        \arrow["{x,y,z}"', from=1-1, to=2-1]
        \arrow[equals, from=1-2, to=1-1]
        \arrow["{(2\ 1)}", from=1-2, to=1-3]
        \arrow["{(\id_x,\id_y,\id_z)}"{description}, from=1-2, to=2-2]
        \arrow["{y,x,z}", from=1-3, to=2-3]
        \arrow[from=2-2, to=2-1]
        \arrow[from=2-2, to=2-3]
    \end{tikzcd}}
    of #{\S X}, which #{\alpha} sends to #{B_{(2\ 1)(3)}(x,y,z):x\otimes y\otimes z\to y\otimes x\otimes z}.
    This produces the relationship between braidings at different levels we had been hoping for, 
    which says more generally that, given any permutation #{\sigma} of #{n} which fixes a certain partition, 
    we can either braid #{n} morphisms locally on each piece of the partition, then tensor the result together,
    or we can first tensor the morphisms together and then braid the result, and the result is the same.} 
    \p{Together with the functoriality results of the previous paragraph, this shows that all the operations 
    of #{\alpha} on morphisms are uniquely determined by the unbraided tensor product and by the 
    binary braiding #{\tau=B_{(2\ 1)}}, so at least 
    at the level of objects we have a notion of (strict) unbiased symmetric monoidal category equivalent 
    to the usual one. For the remaining examples, we shall not go into so much detail on the unbiasing results.
    }
    \li{When #{\S=(\mathrm{bij},\mathrm{id})}, we get symmetric monoidal categories again, since 
    oppositization maps the previous choice of #{\S} onto this one.}
    \li{I assume #{(\mathrm{bij},\mathrm{bij})} is also just symmetric monoidal categories, but it's 
    not immediately obvious how.}
    \li{#{\mathrm{id},\mathrm{fun}} gives cocartesian monoidal categories.}
    \li{#{\mathrm{fun},\mathrm{id}} gives cartesian monoidal categories.}
    \li{Presumably adding bijections to either identity leg above doesn't change the result.}
    \li{#{\mathrm{fun},\mathrm{fun}} gives biproduct categories.}
    \li{We won't explore injections and surjections in depth here, but you get things 
    like semicartesian monoidal categories, or "relevance" monoidal (where there are diagonals 
    but no deletions), or their duals, from picking one or the other leg identity. A class like 
    #{\mathrm{surj},\mathrm{surj}} or #{\mathrm{inj},\mathrm{inj}} should be some kind of crazy 
    thing like a "relevance" biproduct or "semibiproduct" category, not previously known to man 
    as far as I'm aware; you ought to also be able to relevance or semi-ify only one of the 
    cartesian and cocartesian structures. I have no immediate guess at all about #{(\mathrm{inj},\mathrm{surj})}.}  
    \li{We could also soften #{\S} not to be a wide subcategory, restricting then the \List monad on objects in 
    one way or another. The only example I have in mind at the moment is to let #{\S} be all the spans 
    with both ends terminal, which should give a monoid-enriched category (or maybe commutative?) I'm quite
    curious whether there are any cases with the left side wider than the right, which almost feels like 
    multicategories...
    }
}
type u := Unit

type u2 := u

type WeightedGraph := [
  V : Entity,
  E : Entity,
  Weight : AttrType,
  src : (Id Entity)[E, V],
  tgt : (Id Entity)[E, V],
  weight : Attr[E, Weight]
]

type EntityArr := [
  src : Entity,
  tgt : Entity,
  arr : (Id Entity)[src, tgt]
]

type Graph1 := [
  V : Entity,
  E : Entity,
  src : EntityArr & [ .src := E, .tgt := V ],
  tgt : EntityArr & [ .src := E, .tgt := V ],
]

chk [G : Graph1] (G.src.arr : (Id Entity)[G.E, G.V])

chk [G : Graph1] (G.src : EntityArr)

chk [G : Graph1] (G.src : EntityArr & [ .src := G.E ] )

#(should_fail)
chk [G : Graph1] (G.src : EntityArr & [ .src := G.V ] )

norm [x : [a : Entity, b : @sing a]] x.b

#(should_fail)
type Graph1 := [
  V : Entity,
  E : Entity,
  src : EntityArr & [ .src := E, .src := V ]
]
